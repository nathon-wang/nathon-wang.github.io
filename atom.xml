<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>汪南的魔法卷</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-29T07:08:08.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>nathon.wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计划：过去，现在与未来</title>
    <link href="http://yoursite.com/2016/11/28/new-start/"/>
    <id>http://yoursite.com/2016/11/28/new-start/</id>
    <published>2016-11-28T08:21:00.000Z</published>
    <updated>2016-11-29T07:08:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>惭愧，当初说好的勤更新blog，结果辣么就没更新，主要是项目（个人）太忙（懒）。<br>2016年马上就要过完了，最近项目闲下来，这几个月也认真反思了一下自己目前的状态，发现自己对于时间、知识的管理很混乱，玩就玩一阵，学就学一阵，工作就工作一阵，没有固定的计划去做某件事。 拿工作忙作为借口，时机是在偷懒。<br>学技术也是，今天用到或者对某个技术感兴趣就去网上或者软件里找点文章看看，不用了马上就忘了。这么下去是不行滴。<br>于是我对自己说一定要去改变，不负这大好光阴。不仅仅是技术上的，而且包括思想上的，生活上的，身体上的。要想改变自己是非常困难的，而最好的开始就是找到一个支点，于是我真的找到了—-健身，所以过去几个月我一直在自律，在减肥，在健身，<br>努力打造一个好身体并且也不断磨练自己的意志力，事实证明我坚持下来了，减肥大获成功，留的汗水没有白费。当周末自己一个人跑在清冷的道路上时，我也心生很多感悟，让我更加去珍惜每一寸光阴，珍惜与家人尤其是与我儿子在一起的时光。<br>而从今天开始，我觉得，我还应该把思想的改造优先级也要提升一下，读一些好书，对自己已经掌握的，或者还没有掌握但是想要掌握的知识、技能做一些汇总，归纳，分类，化为内在的力量。这篇博客就是一个开始，全新的开始。</p>
<p>马上要过去的11月份重读了一下并总结了一下<br>    Mysql技术内幕-INNODB存储引擎<br>    Mysql stored procedure<br>这两本书，用脑图进行了一次系统的总结。</p>
<p>12月份的书单是<br>    企业架构模式<br>    high performance mysql</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;惭愧，当初说好的勤更新blog，结果辣么就没更新，主要是项目（个人）太忙（懒）。&lt;br&gt;2016年马上就要过完了，最近项目闲下来，这几个月也认真反思了一下自己目前的状态，发现自己对于时间、知识的管理很混乱，玩就玩一阵，学就学一阵，工作就工作一阵，没有固定的计划去做某件事。 
    
    </summary>
    
    
      <category term="心情" scheme="http://yoursite.com/tags/%E5%BF%83%E6%83%85/"/>
    
      <category term="原创" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>Tornado源码分析系列之三: 让世界跑起来的IOLoop</title>
    <link href="http://yoursite.com/2015/07/18/tornado-source-insight-03-event-loop/"/>
    <id>http://yoursite.com/2015/07/18/tornado-source-insight-03-event-loop/</id>
    <published>2015-07-18T09:50:24.000Z</published>
    <updated>2016-11-28T08:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>IOLoop是EventLoop的Tornado实现，说到EventLoop首先要从非阻塞调用说起。一般的网络服务器要经历socket-&gt;bind-&gt;listen-&gt;accept-&gt;recv/send调用，其中<br>accept/send/recv是阻塞的，accept调用要返回已经建立连接的那个socket，send/recv使用这个socket接收和发送数据。 因为accept是阻塞的，所以正常的情况<br>下我们只能处理一个网络请求，直到这个请求结束为止。使用多进程和多线程，可以把accept和send/recv的过程分离开来，由主进程/线程accept，连接建立之后<br>创建一个子进程/线程来处理数据的收发，这样就可以处理多个连接了。还有另一种处理方式，有一个select的称作IO多路复用的系统调用，select调用的签名是<br>int select(int maxfd, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, const struct timeval *timeout)，首先要把需要监听的fd设置为非<br>阻塞型。然后根据fd的监听的事件类型加入到readfds, writefds, exceptfds中。然后程序就会阻塞在select调用上，当其中的任何一个fd有事件发生时，select<br>就会返回发生事件的fd的数量。<br>接下来要说下EventLoop的设计模式Reactor模式。<br>最后要说的EventLoop的具体实现IOLoop，主要代码集中ioloop.py，看下怎么使用先。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> errno</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">import</span> tornado.ioloop</div><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">connection_ready</span><span class="params">(sock, fd, events)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            connection, address = sock.accept()</div><div class="line">        <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</div><div class="line">            <span class="keyword">if</span> e.args[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> (errno.EWOULDBLOCK, errno.EAGAIN):</div><div class="line">                <span class="keyword">raise</span></div><div class="line">            <span class="keyword">return</span></div><div class="line">        connection.setblocking(<span class="number">0</span>)</div><div class="line">        handle_connection(connection, address)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, <span class="number">0</span>)</div><div class="line">    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</div><div class="line">    sock.setblocking(<span class="number">0</span>)</div><div class="line">    sock.bind((<span class="string">""</span>, port))</div><div class="line">    sock.listen(<span class="number">128</span>)</div><div class="line"></div><div class="line">    io_loop = tornado.ioloop.IOLoop.current()</div><div class="line">    callback = functools.partial(connection_ready, sock)</div><div class="line">    io_loop.add_handler(sock.fileno(), callback, io_loop.READ)</div><div class="line">    io_loop.start()</div></pre></td></tr></table></figure>
<p>然后进入IOLoop这个类，看下IOLoop是怎么实现和封装EventLoop的。不同的操作系统对于IO多路复用有不同的系统调用来支持。对于Linux有比select性能更好<br>的epoll，BSD有kqueue，那么Tornado如何屏蔽这些系统差异使得统一的IOLoop实例既能表现差异又能方便使用呢。Tornado的util.py中有一个类Configurable就是<br>用来干这个事的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Configurable</span><span class="params">(object)</span>:</span></div><div class="line">    __impl_class = <span class="keyword">None</span></div><div class="line">    __impl_kwargs = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></div><div class="line">        <span class="comment">#取配置的base class</span></div><div class="line">        base = cls.configurable_base()</div><div class="line">        init_kwargs = &#123;&#125;</div><div class="line">        <span class="comment">#如果是调用配置的base class来生成instance，则调用其configured_class方法来生产instance</span></div><div class="line">        <span class="keyword">if</span> cls <span class="keyword">is</span> base:</div><div class="line">            impl = cls.configured_class()</div><div class="line">            <span class="keyword">if</span> base.__impl_kwargs:</div><div class="line">                init_kwargs.update(base.__impl_kwargs)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            impl = cls</div><div class="line">        init_kwargs.update(kwargs)</div><div class="line">        instance = super(Configurable, cls).__new__(impl)</div><div class="line">        <span class="comment">#调用initialize方法来初始化instance</span></div><div class="line">        instance.initialize(*args, **init_kwargs)</div><div class="line">        <span class="keyword">return</span> instance</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">configurable_base</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="keyword">raise</span> NotImplementedError()</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">configurable_default</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="keyword">raise</span> NotImplementedError()</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">configured_class</span><span class="params">(cls)</span>:</span></div><div class="line">        base = cls.configurable_base()</div><div class="line">        <span class="comment">#如果具体的实现类是None，则将congfigurable_default设置成实现类</span></div><div class="line">        <span class="keyword">if</span> cls.__impl_class <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            base.__impl_class = cls.configurable_default()</div><div class="line">        <span class="keyword">return</span> base.__impl_class</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IOLoop</span><span class="params">(Configurable)</span>:</span></div><div class="line">    _current = threading.local()</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">instance</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">return</span> IOLoop._instance</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialized</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">return</span> hasattr(IOLoop, <span class="string">"_instance"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">install</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">assert</span> <span class="keyword">not</span> IOLoop.initialized()</div><div class="line">        IOLoop._instance = self</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear_instance</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">if</span> hasattr(IOLoop, <span class="string">"_instance"</span>):</div><div class="line">            <span class="keyword">del</span> IOLoop._instance</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">current</span><span class="params">(instance=True)</span>:</span></div><div class="line">        current = getattr(IOLoop._current, <span class="string">"instance"</span>, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">if</span> current <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">and</span> instance:</div><div class="line">            <span class="keyword">return</span> IOLoop.instance()</div><div class="line">        <span class="keyword">return</span> current</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_current</span><span class="params">(self)</span>:</span></div><div class="line">        IOLoop._current.instance = self</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">configurable_base</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="keyword">return</span> IOLoop</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">configurable_default</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="keyword">if</span> hasattr(select, <span class="string">"epoll"</span>):</div><div class="line">            <span class="keyword">from</span> tornado.platform.epoll <span class="keyword">import</span> EPollIOLoop</div><div class="line">            <span class="keyword">return</span> EPollIOLoop</div><div class="line">        <span class="keyword">if</span> hasattr(select, <span class="string">"kqueue"</span>):</div><div class="line">            <span class="keyword">from</span> tornado.platform.kqueue <span class="keyword">import</span> KQueueIOLoop</div><div class="line">            <span class="keyword">return</span> KQueueIOLoop</div><div class="line">        <span class="keyword">from</span> tornado.platform.select <span class="keyword">import</span> SelectIOLoop</div><div class="line">        <span class="keyword">return</span> SelectIOLoop</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(self, make_current=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> make_current <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">if</span> IOLoop.current(instance=<span class="keyword">False</span>) <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                self.make_current()</div><div class="line">        <span class="keyword">elif</span> make_current:</div><div class="line">            <span class="keyword">if</span> IOLoop.current(instance=<span class="keyword">False</span>) <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">"current IOLoop already exists"</span>)</div><div class="line">            self.make_current()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_sync</span><span class="params">(self, func, timeout=None)</span>:</span></div><div class="line">        future_cell = [<span class="keyword">None</span>]</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                result = func()</div><div class="line">            <span class="keyword">except</span> Exception:</div><div class="line">                future_cell[<span class="number">0</span>] = TracebackFuture()</div><div class="line">                future_cell[<span class="number">0</span>].set_exc_info(sys.exc_info())</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">if</span> is_future(result):</div><div class="line">                    future_cell[<span class="number">0</span>] = result</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    future_cell[<span class="number">0</span>] = TracebackFuture()</div><div class="line">                    future_cell[<span class="number">0</span>].set_result(result)</div><div class="line">            self.add_future(future_cell[<span class="number">0</span>], <span class="keyword">lambda</span> future: self.stop())</div><div class="line">        self.add_callback(run)</div><div class="line">        <span class="keyword">if</span> timeout <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            timeout_handle = self.add_timeout(self.time() + timeout, self.stop)</div><div class="line">        self.start()</div><div class="line">        <span class="keyword">if</span> timeout <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            self.remove_timeout(timeout_handle)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> future_cell[<span class="number">0</span>].done():</div><div class="line">            <span class="keyword">raise</span> TimeoutError(<span class="string">'Operation timed out after %s seconds'</span> % timeout)</div><div class="line">        <span class="keyword">return</span> future_cell[<span class="number">0</span>].result()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_timeout</span><span class="params">(self, deadline, callback, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> isinstance(deadline, numbers.Real):</div><div class="line">            <span class="keyword">return</span> self.call_at(deadline, callback, *args, **kwargs)</div><div class="line">        <span class="keyword">elif</span> isinstance(deadline, datetime.timedelta):</div><div class="line">            <span class="keyword">return</span> self.call_at(self.time() + timedelta_to_seconds(deadline),</div><div class="line">                                callback, *args, **kwargs)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> TypeError(<span class="string">"Unsupported deadline %r"</span> % deadline)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call_later</span><span class="params">(self, delay, callback, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.call_at(self.time() + delay, callback, *args, **kwargs)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call_at</span><span class="params">(self, when, callback, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.add_timeout(when, callback, *args, **kwargs)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spawn_callback</span><span class="params">(self, callback, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">with</span> stack_context.NullContext():</div><div class="line">            self.add_callback(callback, *args, **kwargs)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_future</span><span class="params">(self, future, callback)</span>:</span></div><div class="line">        <span class="keyword">assert</span> is_future(future)</div><div class="line">        callback = stack_context.wrap(callback)</div><div class="line">        future.add_done_callback(</div><div class="line">            <span class="keyword">lambda</span> future: self.add_callback(callback, future))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_run_callback</span><span class="params">(self, callback)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            ret = callback()</div><div class="line">            <span class="keyword">if</span> ret <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> is_future(ret):</div><div class="line">                self.add_future(ret, <span class="keyword">lambda</span> f: f.result())</div><div class="line">        <span class="keyword">except</span> Exception:</div><div class="line">            self.handle_callback_exception(callback)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PollIOLoop</span><span class="params">(IOLoop)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(self, impl, time_func=None, **kwargs)</span>:</span></div><div class="line">        super(PollIOLoop, self).initialize(**kwargs)</div><div class="line">        self._impl = impl</div><div class="line">        <span class="keyword">if</span> hasattr(self._impl, <span class="string">'fileno'</span>):</div><div class="line">            set_close_exec(self._impl.fileno())</div><div class="line">        self.time_func = time_func <span class="keyword">or</span> time.time</div><div class="line">        self._handlers = &#123;&#125;</div><div class="line">        self._events = &#123;&#125;</div><div class="line">        self._callbacks = []</div><div class="line">        self._callback_lock = threading.Lock()</div><div class="line">        self._timeouts = []</div><div class="line">        self._cancellations = <span class="number">0</span></div><div class="line">        self._running = <span class="keyword">False</span></div><div class="line">        self._stopped = <span class="keyword">False</span></div><div class="line">        self._closing = <span class="keyword">False</span></div><div class="line">        self._thread_ident = <span class="keyword">None</span></div><div class="line">        self._blocking_signal_threshold = <span class="keyword">None</span></div><div class="line">        self._timeout_counter = itertools.count()</div><div class="line"></div><div class="line">        <span class="comment"># Create a pipe that we send bogus data to when we want to wake</span></div><div class="line">        <span class="comment"># the I/O loop when it is idle</span></div><div class="line">        self._waker = Waker()</div><div class="line">        self.add_handler(self._waker.fileno(),</div><div class="line">                         <span class="keyword">lambda</span> fd, events: self._waker.consume(),</div><div class="line">                         self.READ)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self, all_fds=False)</span>:</span></div><div class="line">        <span class="keyword">with</span> self._callback_lock:</div><div class="line">            self._closing = <span class="keyword">True</span></div><div class="line">        self.remove_handler(self._waker.fileno())</div><div class="line">        <span class="keyword">if</span> all_fds:</div><div class="line">            <span class="keyword">for</span> fd, handler <span class="keyword">in</span> self._handlers.values():</div><div class="line">                self.close_fd(fd)</div><div class="line">        self._waker.close()</div><div class="line">        self._impl.close()</div><div class="line">        self._callbacks = <span class="keyword">None</span></div><div class="line">        self._timeouts = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_handler</span><span class="params">(self, fd, handler, events)</span>:</span></div><div class="line">        fd, obj = self.split_fd(fd)</div><div class="line">        self._handlers[fd] = (obj, stack_context.wrap(handler))</div><div class="line">        self._impl.register(fd, events | self.ERROR)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_handler</span><span class="params">(self, fd, events)</span>:</span></div><div class="line">        fd, obj = self.split_fd(fd)</div><div class="line">        self._impl.modify(fd, events | self.ERROR)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_handler</span><span class="params">(self, fd)</span>:</span></div><div class="line">        fd, obj = self.split_fd(fd)</div><div class="line">        self._handlers.pop(fd, <span class="keyword">None</span>)</div><div class="line">        self._events.pop(fd, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self._impl.unregister(fd)</div><div class="line">        <span class="keyword">except</span> Exception:</div><div class="line">            gen_log.debug(<span class="string">"Error deleting fd from IOLoop"</span>, exc_info=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_blocking_signal_threshold</span><span class="params">(self, seconds, action)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(signal, <span class="string">"setitimer"</span>):</div><div class="line">            gen_log.error(<span class="string">"set_blocking_signal_threshold requires a signal module "</span></div><div class="line">                          <span class="string">"with the setitimer method"</span>)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        self._blocking_signal_threshold = seconds</div><div class="line">        <span class="keyword">if</span> seconds <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            signal.signal(signal.SIGALRM,</div><div class="line">                          action <span class="keyword">if</span> action <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">else</span> signal.SIG_DFL)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self._running:</div><div class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">"IOLoop is already running"</span>)</div><div class="line">        self._setup_logging()</div><div class="line">        <span class="keyword">if</span> self._stopped:</div><div class="line">            self._stopped = <span class="keyword">False</span></div><div class="line">            <span class="keyword">return</span></div><div class="line">        old_current = getattr(IOLoop._current, <span class="string">"instance"</span>, <span class="keyword">None</span>)</div><div class="line">        IOLoop._current.instance = self</div><div class="line">        self._thread_ident = thread.get_ident()</div><div class="line">        self._running = <span class="keyword">True</span></div><div class="line"></div><div class="line">        <span class="comment"># signal.set_wakeup_fd closes a race condition in event loops:</span></div><div class="line">        <span class="comment"># a signal may arrive at the beginning of select/poll/etc</span></div><div class="line">        <span class="comment"># before it goes into its interruptible sleep, so the signal</span></div><div class="line">        <span class="comment"># will be consumed without waking the select.  The solution is</span></div><div class="line">        <span class="comment"># for the (C, synchronous) signal handler to write to a pipe,</span></div><div class="line">        <span class="comment"># which will then be seen by select.</span></div><div class="line">        <span class="comment">#</span></div><div class="line">        <span class="comment"># In python's signal handling semantics, this only matters on the</span></div><div class="line">        <span class="comment"># main thread (fortunately, set_wakeup_fd only works on the main</span></div><div class="line">        <span class="comment"># thread and will raise a ValueError otherwise).</span></div><div class="line">        <span class="comment">#</span></div><div class="line">        <span class="comment"># If someone has already set a wakeup fd, we don't want to</span></div><div class="line">        <span class="comment"># disturb it.  This is an issue for twisted, which does its</span></div><div class="line">        <span class="comment"># SIGCHLD processing in response to its own wakeup fd being</span></div><div class="line">        <span class="comment"># written to.  As long as the wakeup fd is registered on the IOLoop,</span></div><div class="line">        <span class="comment"># the loop will still wake up and everything should work.</span></div><div class="line">        old_wakeup_fd = <span class="keyword">None</span></div><div class="line">        <span class="keyword">if</span> hasattr(signal, <span class="string">'set_wakeup_fd'</span>) <span class="keyword">and</span> os.name == <span class="string">'posix'</span>:</div><div class="line">            <span class="comment"># requires python 2.6+, unix.  set_wakeup_fd exists but crashes</span></div><div class="line">            <span class="comment"># the python process on windows.</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                old_wakeup_fd = signal.set_wakeup_fd(self._waker.write_fileno())</div><div class="line">                <span class="keyword">if</span> old_wakeup_fd != <span class="number">-1</span>:</div><div class="line">                    <span class="comment"># Already set, restore previous value.  This is a little racy,</span></div><div class="line">                    <span class="comment"># but there's no clean get_wakeup_fd and in real use the</span></div><div class="line">                    <span class="comment"># IOLoop is just started once at the beginning.</span></div><div class="line">                    signal.set_wakeup_fd(old_wakeup_fd)</div><div class="line">                    old_wakeup_fd = <span class="keyword">None</span></div><div class="line">            <span class="keyword">except</span> ValueError:</div><div class="line">                <span class="comment"># Non-main thread, or the previous value of wakeup_fd</span></div><div class="line">                <span class="comment"># is no longer valid.</span></div><div class="line">                old_wakeup_fd = <span class="keyword">None</span></div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">                <span class="comment"># Prevent IO event starvation by delaying new callbacks</span></div><div class="line">                <span class="comment"># to the next iteration of the event loop.</span></div><div class="line">                <span class="keyword">with</span> self._callback_lock:</div><div class="line">                    callbacks = self._callbacks</div><div class="line">                    self._callbacks = []</div><div class="line"></div><div class="line">                <span class="comment"># Add any timeouts that have come due to the callback list.</span></div><div class="line">                <span class="comment"># Do not run anything until we have determined which ones</span></div><div class="line">                <span class="comment"># are ready, so timeouts that call add_timeout cannot</span></div><div class="line">                <span class="comment"># schedule anything in this iteration.</span></div><div class="line">                due_timeouts = []</div><div class="line">                <span class="keyword">if</span> self._timeouts:</div><div class="line">                    now = self.time()</div><div class="line">                    <span class="keyword">while</span> self._timeouts:</div><div class="line">                        <span class="keyword">if</span> self._timeouts[<span class="number">0</span>].callback <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                            <span class="comment"># The timeout was cancelled.  Note that the</span></div><div class="line">                            <span class="comment"># cancellation check is repeated below for timeouts</span></div><div class="line">                            <span class="comment"># that are cancelled by another timeout or callback.</span></div><div class="line">                            heapq.heappop(self._timeouts)</div><div class="line">                            self._cancellations -= <span class="number">1</span></div><div class="line">                        <span class="keyword">elif</span> self._timeouts[<span class="number">0</span>].deadline &lt;= now:</div><div class="line">                            due_timeouts.append(heapq.heappop(self._timeouts))</div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            <span class="keyword">break</span></div><div class="line">                    <span class="keyword">if</span> (self._cancellations &gt; <span class="number">512</span></div><div class="line">                            <span class="keyword">and</span> self._cancellations &gt; (len(self._timeouts) &gt;&gt; <span class="number">1</span>)):</div><div class="line">                        <span class="comment"># Clean up the timeout queue when it gets large and it's</span></div><div class="line">                        <span class="comment"># more than half cancellations.</span></div><div class="line">                        self._cancellations = <span class="number">0</span></div><div class="line">                        self._timeouts = [x <span class="keyword">for</span> x <span class="keyword">in</span> self._timeouts</div><div class="line">                                          <span class="keyword">if</span> x.callback <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>]</div><div class="line">                        heapq.heapify(self._timeouts)</div><div class="line"></div><div class="line">                <span class="keyword">for</span> callback <span class="keyword">in</span> callbacks:</div><div class="line">                    self._run_callback(callback)</div><div class="line">                <span class="keyword">for</span> timeout <span class="keyword">in</span> due_timeouts:</div><div class="line">                    <span class="keyword">if</span> timeout.callback <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                        self._run_callback(timeout.callback)</div><div class="line">                <span class="comment"># Closures may be holding on to a lot of memory, so allow</span></div><div class="line">                <span class="comment"># them to be freed before we go into our poll wait.</span></div><div class="line">                callbacks = callback = due_timeouts = timeout = <span class="keyword">None</span></div><div class="line"></div><div class="line">                <span class="keyword">if</span> self._callbacks:</div><div class="line">                    <span class="comment"># If any callbacks or timeouts called add_callback,</span></div><div class="line">                    <span class="comment"># we don't want to wait in poll() before we run them.</span></div><div class="line">                    poll_timeout = <span class="number">0.0</span></div><div class="line">                <span class="keyword">elif</span> self._timeouts:</div><div class="line">                    <span class="comment"># If there are any timeouts, schedule the first one.</span></div><div class="line">                    <span class="comment"># Use self.time() instead of 'now' to account for time</span></div><div class="line">                    <span class="comment"># spent running callbacks.</span></div><div class="line">                    poll_timeout = self._timeouts[<span class="number">0</span>].deadline - self.time()</div><div class="line">                    poll_timeout = max(<span class="number">0</span>, min(poll_timeout, _POLL_TIMEOUT))</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="comment"># No timeouts and no callbacks, so use the default.</span></div><div class="line">                    poll_timeout = _POLL_TIMEOUT</div><div class="line"></div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self._running:</div><div class="line">                    <span class="keyword">break</span></div><div class="line"></div><div class="line">                <span class="keyword">if</span> self._blocking_signal_threshold <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                    <span class="comment"># clear alarm so it doesn't fire while poll is waiting for</span></div><div class="line">                    <span class="comment"># events.</span></div><div class="line">                    signal.setitimer(signal.ITIMER_REAL, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line"></div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    event_pairs = self._impl.poll(poll_timeout)</div><div class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                    <span class="comment"># Depending on python version and IOLoop implementation,</span></div><div class="line">                    <span class="comment"># different exception types may be thrown and there are</span></div><div class="line">                    <span class="comment"># two ways EINTR might be signaled:</span></div><div class="line">                    <span class="comment"># * e.errno == errno.EINTR</span></div><div class="line">                    <span class="comment"># * e.args is like (errno.EINTR, 'Interrupted system call')</span></div><div class="line">                    <span class="keyword">if</span> errno_from_exception(e) == errno.EINTR:</div><div class="line">                        <span class="keyword">continue</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        <span class="keyword">raise</span></div><div class="line"></div><div class="line">                <span class="keyword">if</span> self._blocking_signal_threshold <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                    signal.setitimer(signal.ITIMER_REAL,</div><div class="line">                                     self._blocking_signal_threshold, <span class="number">0</span>)</div><div class="line"></div><div class="line">                <span class="comment"># Pop one fd at a time from the set of pending fds and run</span></div><div class="line">                <span class="comment"># its handler. Since that handler may perform actions on</span></div><div class="line">                <span class="comment"># other file descriptors, there may be reentrant calls to</span></div><div class="line">                <span class="comment"># this IOLoop that update self._events</span></div><div class="line">                self._events.update(event_pairs)</div><div class="line">                <span class="keyword">while</span> self._events:</div><div class="line">                    fd, events = self._events.popitem()</div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        fd_obj, handler_func = self._handlers[fd]</div><div class="line">                        handler_func(fd_obj, events)</div><div class="line">                    <span class="keyword">except</span> (OSError, IOError) <span class="keyword">as</span> e:</div><div class="line">                        <span class="keyword">if</span> errno_from_exception(e) == errno.EPIPE:</div><div class="line">                            <span class="comment"># Happens when the client closes the connection</span></div><div class="line">                            <span class="keyword">pass</span></div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            self.handle_callback_exception(self._handlers.get(fd))</div><div class="line">                    <span class="keyword">except</span> Exception:</div><div class="line">                        self.handle_callback_exception(self._handlers.get(fd))</div><div class="line">                fd_obj = handler_func = <span class="keyword">None</span></div><div class="line"></div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            <span class="comment"># reset the stopped flag so another start/stop pair can be issued</span></div><div class="line">            self._stopped = <span class="keyword">False</span></div><div class="line">            <span class="keyword">if</span> self._blocking_signal_threshold <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                signal.setitimer(signal.ITIMER_REAL, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">            IOLoop._current.instance = old_current</div><div class="line">            <span class="keyword">if</span> old_wakeup_fd <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                signal.set_wakeup_fd(old_wakeup_fd)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></div><div class="line">        self._running = <span class="keyword">False</span></div><div class="line">        self._stopped = <span class="keyword">True</span></div><div class="line">        self._waker.wake()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">time</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.time_func()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call_at</span><span class="params">(self, deadline, callback, *args, **kwargs)</span>:</span></div><div class="line">        timeout = _Timeout(</div><div class="line">            deadline,</div><div class="line">            functools.partial(stack_context.wrap(callback), *args, **kwargs),</div><div class="line">            self)</div><div class="line">        heapq.heappush(self._timeouts, timeout)</div><div class="line">        <span class="keyword">return</span> timeout</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_timeout</span><span class="params">(self, timeout)</span>:</span></div><div class="line">        <span class="comment"># Removing from a heap is complicated, so just leave the defunct</span></div><div class="line">        <span class="comment"># timeout object in the queue (see discussion in</span></div><div class="line">        <span class="comment"># http://docs.python.org/library/heapq.html).</span></div><div class="line">        <span class="comment"># If this turns out to be a problem, we could add a garbage</span></div><div class="line">        <span class="comment"># collection pass whenever there are too many dead timeouts.</span></div><div class="line">        timeout.callback = <span class="keyword">None</span></div><div class="line">        self._cancellations += <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_callback</span><span class="params">(self, callback, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">with</span> self._callback_lock:</div><div class="line">            <span class="keyword">if</span> self._closing:</div><div class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">"IOLoop is closing"</span>)</div><div class="line">            list_empty = <span class="keyword">not</span> self._callbacks</div><div class="line">            self._callbacks.append(functools.partial(</div><div class="line">                stack_context.wrap(callback), *args, **kwargs))</div><div class="line">            <span class="keyword">if</span> list_empty <span class="keyword">and</span> thread.get_ident() != self._thread_ident:</div><div class="line">                <span class="comment"># If we're in the IOLoop's thread, we know it's not currently</span></div><div class="line">                <span class="comment"># polling.  If we're not, and we added the first callback to an</span></div><div class="line">                <span class="comment"># empty list, we may need to wake it up (it may wake up on its</span></div><div class="line">                <span class="comment"># own, but an occasional extra wake is harmless).  Waking</span></div><div class="line">                <span class="comment"># up a polling IOLoop is relatively expensive, so we try to</span></div><div class="line">                <span class="comment"># avoid it when we can.</span></div><div class="line">                self._waker.wake()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_callback_from_signal</span><span class="params">(self, callback, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">with</span> stack_context.NullContext():</div><div class="line">            <span class="keyword">if</span> thread.get_ident() != self._thread_ident:</div><div class="line">                <span class="comment"># if the signal is handled on another thread, we can add</span></div><div class="line">                <span class="comment"># it normally (modulo the NullContext)</span></div><div class="line">                self.add_callback(callback, *args, **kwargs)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="comment"># If we're on the IOLoop's thread, we cannot use</span></div><div class="line">                <span class="comment"># the regular add_callback because it may deadlock on</span></div><div class="line">                <span class="comment"># _callback_lock.  Blindly insert into self._callbacks.</span></div><div class="line">                <span class="comment"># This is safe because the GIL makes list.append atomic.</span></div><div class="line">                <span class="comment"># One subtlety is that if the signal interrupted the</span></div><div class="line">                <span class="comment"># _callback_lock block in IOLoop.start, we may modify</span></div><div class="line">                <span class="comment"># either the old or new version of self._callbacks,</span></div><div class="line">                <span class="comment"># but either way will work.</span></div><div class="line">                self._callbacks.append(functools.partial(</div><div class="line">                    stack_context.wrap(callback), *args, **kwargs))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IOLoop是EventLoop的Tornado实现，说到EventLoop首先要从非阻塞调用说起。一般的网络服务器要经历socket-&amp;gt;bind-&amp;gt;listen-&amp;gt;accept-&amp;gt;recv/send调用，其中&lt;br&gt;accept/send/recv
    
    </summary>
    
    
      <category term="原创" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Tornado" scheme="http://yoursite.com/tags/Tornado/"/>
    
  </entry>
  
  <entry>
    <title>Tornado源码分析系列之二: 让异常无处可逃的stack_context</title>
    <link href="http://yoursite.com/2015/07/14/tornado-source-insight-02-stack-context-md/"/>
    <id>http://yoursite.com/2015/07/14/tornado-source-insight-02-stack-context-md/</id>
    <published>2015-07-14T03:35:07.000Z</published>
    <updated>2016-11-28T08:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章讨论了一下gen和Future，这次讨论一下Tornado的另一个特色的机制stack_context。首先看下异步调用过程中出现的问题。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dosomething</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_cb</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">raise</span> ValueException()</div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        do_async(callback=do_cb)</div><div class="line">    <span class="keyword">except</span> ValueException:</div><div class="line">        deal_with_exception()</div></pre></td></tr></table></figure>
<p>上面的方法里try…except能捕获到do_async抛出的ValueException异常但是不能捕获do_cb中抛出的异常。因为do_cb并没有立即执行，只是被<br>放到IOLoop中，在适当的时机调用。而在do_cb调用的时候早就不在try…except块中。那么怎么才能做到统一的处理的，可以将try…except部分封装起来，<br>像下面这样。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">def wrap(func):</div><div class="line">    def inner(*args, **kwargs)</div><div class="line">        try:</div><div class="line">            return func(*args, **kwargs)</div><div class="line">        except ValueException:</div><div class="line">            deal_with_exception()</div><div class="line">    return inner</div><div class="line"></div><div class="line">def dosomething():</div><div class="line">    def do_cb():</div><div class="line">        raise ValueException()</div><div class="line"></div><div class="line">    wrap(do_async(callback=wrap(do_cb)))</div></pre></td></tr></table></figure>
<p>stack_context就是使用了上面的这种解决方案，当然作为一个框架代码stack_context.py逼格更高一点，使用contextmanager这一python中特性来实现上述功能。 contextmanger字面意思就是上下文管理器。 Python中将资源的分配和回收放到上下文管理器中，当with contextmanger_instances as inst 时，相当于<br>调用contextmanger的__enter__方法并将__enter__方法的返回值赋予as后面的变量inst，并在退出with语句块时调用contextmanger的__exit__方法。<br>定义了__enter__和__exit__这两个方法的类就是一个contextmanger，也可以说这两个方法就是python里contextmanger的协议。不多说，直接上代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackContext</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="comment">#注意，这个里context_factory就是我们实际想进入的那个context的工厂方法，StackContext只是这个context的管理器。</span></div><div class="line">    <span class="comment">#也就是说拿管理器来替代实际想进入的context。对于异常来说这里的context_factory就是exception_handler。</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, context_factory)</span>:</span></div><div class="line">        self.context_factory = context_factory</div><div class="line">        self.contexts = []</div><div class="line">        self.active = <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="comment">#这个方法在__enter__中返回， 如果你不想这个StackContext往里(下)传播，就应该with StackContext(some_method) as deactivate, 然后在with块</span></div><div class="line">    <span class="comment">#内部调用deactivate方法。</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_deactivate</span><span class="params">(self)</span>:</span></div><div class="line">        self.active = <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="comment">#调用传进来的那个context的__enter__方法，也就是进入了context中了，注意传进来的那个context才是主角，</span></div><div class="line">    <span class="comment">#StackContext只不过是个工具，维护传进来的那个context的工具</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enter</span><span class="params">(self)</span>:</span></div><div class="line">        context = self.context_factory()</div><div class="line">        self.contexts.append(context)</div><div class="line">        context.__enter__()</div><div class="line"></div><div class="line">    <span class="comment">#调用传进来的那个context的__exit__方法，也就是退出了context</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">(self, type, value, traceback)</span>:</span></div><div class="line">        context = self.contexts.pop()</div><div class="line">        context.__exit__(type, value, traceback)</div><div class="line"></div><div class="line">    <span class="comment">#这个是StackContext这个context的__enter__方法，这个里面主要干了三件事</span></div><div class="line">    <span class="comment">#1.保存还没有进入StackContext之前的context状态（因为进入当前的StackContext之前可能已经进入了好几个其他的StackContext)</span></div><div class="line">    <span class="comment">#2.更新当前的context状态，将当前的StackContext入栈</span></div><div class="line">    <span class="comment">#3.调用传进来的那个context的enter方法,进入该context</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></div><div class="line">        self.old_contexts = _state.contexts</div><div class="line">        <span class="comment">#当前的StackContext进栈</span></div><div class="line">        self.new_contexts = (self.old_contexts[<span class="number">0</span>] + (self,), self)</div><div class="line">        _state.contexts = self.new_contexts</div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.enter()</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            _state.contexts = self.old_contexts</div><div class="line">            <span class="keyword">raise</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> self._deactivate</div><div class="line"></div><div class="line">    <span class="comment">#这个是StackContext这个context的__enter__方法，这个里面主要干了两件事</span></div><div class="line">    <span class="comment">#1.调用传进来的那个context的exit方法,退出该context</span></div><div class="line">    <span class="comment">#2.恢复到调用该StackContext之前的context状态</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, type, value, traceback)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.exit(type, value, traceback)</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            final_contexts = _state.contexts</div><div class="line">            _state.contexts = self.old_contexts</div><div class="line"></div><div class="line">            self.new_contexts = <span class="keyword">None</span></div></pre></td></tr></table></figure>
<p>如果耐心点看上面的代码的话，就很容易知道，Tornado把context的管理抽象成一个状态机。每进入或退出一个StackContext状态机就发生一次变迁，<br>这也是为什么那个Thread.local的变量名字叫_state，_state[0]是历史路径上的所有的StackContext，_state[1]是当前的那个StackContext。如果你把<br>_state[0]看成一个栈，那么_state[1]就是栈的top指针了。这是一个小栈，同时还有一个大栈，这个大栈是不同时期的_state组成的。_state这个变量<br>就是top指针，每个时期的_state[1]里面有一个叫old_contexts的指针指向上一个时期的栈，这个大栈同时也是一个后插法构建的链表。说白了，_state的<br>栈与普通栈的不同就是普通栈进栈出栈只是在一个栈里面。而_state栈进栈会复制一个栈，出栈是回退到进栈之前的那个栈。这么多个栈肯定有点晕了。<br>画个图理解一下。<br><img src="/img/stack_context.png" alt="stack_context变迁图"><br>通过上面的StackContext使用语句with StackContext(some_factory)只是完成了我第二段代码里wrap(do_async)的操作，do_cb还没有wrap呢。<br>这个时候stack_context.wrap这个函数就出场了，这也是stack_context里面，唯一有点难度的代码，当然如果看懂了上面这个图，这段代码其实也很简单。<br>不多说，上代码。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(fn)</span>:</span></div><div class="line">    <span class="comment">#防止wrap被重复调用</span></div><div class="line">    <span class="keyword">if</span> fn <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> hasattr(fn, <span class="string">'_wrapped'</span>):</div><div class="line">        <span class="keyword">return</span> fn</div><div class="line"></div><div class="line">    <span class="comment">#这个变量很关键，是do_cb被wrap时的contexts。为啥要用list来装_state.contexts而不直接赋值呢？</span></div><div class="line">    <span class="comment">#其实很简单，因为python2.x中只能访问闭包中的变量不能修改。直到python3.x才有nonlocal关键字。</span></div><div class="line">    <span class="comment">#把_state.contexts放到列表里，列表本身不会被修改，但是列表中的内容却可以修改，tornado源码很多地方也用了此技术。</span></div><div class="line">    cap_contexts = [_state.contexts]</div><div class="line"></div><div class="line">    <span class="comment">#如果当前没有contexts，也是就是_state == ((), None)。这个时候没有必要进行wrapped这个耗的操作，直接走捷径。</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cap_contexts[<span class="number">0</span>][<span class="number">0</span>] <span class="keyword">and</span> <span class="keyword">not</span> cap_contexts[<span class="number">0</span>][<span class="number">1</span>]:</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">null_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                current_state = _state.contexts</div><div class="line">                _state.contexts = cap_contexts[<span class="number">0</span>]</div><div class="line">                <span class="keyword">return</span> fn(*args, **kwargs)</div><div class="line">            <span class="keyword">finally</span>:</div><div class="line">                _state.contexts = current_state</div><div class="line">        null_wrapper._wrapped = <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> null_wrapper</div><div class="line"></div><div class="line">    <span class="comment">#_state有内容则返回wrapped</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        ret = <span class="keyword">None</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="comment">#这个是函数do_cb执行时的contexts，也就是当前的contexts与上面的cap_contexts不是一回事，上面是生成闭包时，下面是执行闭包时</span></div><div class="line">            <span class="comment">#注意这个两个时间的不同。这两个时间之间可能已经进入和退出了很多的StackContext。这也是为什么要设计成进入</span></div><div class="line">            <span class="comment">#StackContext就要保存前一个_state栈并复制一份修改复制的而不是直接修改前一个，因为这样可以很方便回退到前面的_state。</span></div><div class="line">            current_state = _state.contexts</div><div class="line"></div><div class="line">            <span class="comment">#删除那些deactivate被调用过的StackContext。前文也说过可以用deactivate取消StackContext的传播。</span></div><div class="line">            <span class="comment">#_remove_deactivated在下面单讲。</span></div><div class="line">            cap_contexts[<span class="number">0</span>] = contexts = _remove_deactivated(cap_contexts[<span class="number">0</span>])</div><div class="line"></div><div class="line">            <span class="comment">#恢复状态到生成闭包时的，这样do_cb就和do_async处于同样的执行环境了。</span></div><div class="line">            _state.contexts = contexts</div><div class="line"></div><div class="line">            exc = (<span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>)</div><div class="line">            top = <span class="keyword">None</span></div><div class="line"></div><div class="line">            <span class="comment">#从这开始，开始执行_state[0]中的每一个context，执行其__enter__方法进入context，执行其__exit__方法退出context，处理执行过程中可能发生异常。</span></div><div class="line">            last_ctx = <span class="number">0</span></div><div class="line">            stack = contexts[<span class="number">0</span>]</div><div class="line"></div><div class="line">            <span class="comment">#按顺序进入context</span></div><div class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> stack:</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    n.enter()</div><div class="line">                    last_ctx += <span class="number">1</span></div><div class="line">                <span class="keyword">except</span>:</div><div class="line">                    <span class="comment">#context.__enter__也可能会发生异常，要处理这种情况。top指针指向发生了异常的前一个StackContext。</span></div><div class="line">                    <span class="comment">#因为发生enter异常的那个StackContext我们没有进入，所以也没有必要在异常发生的时候去调用exit退出。</span></div><div class="line">                    <span class="comment">#对比_handle_exception和处理fn调用时发生异常的top = contexts[1]来理解一下这段代码</span></div><div class="line">                    exc = sys.exc_info()</div><div class="line">                    top = n.old_contexts[<span class="number">1</span>]</div><div class="line"></div><div class="line">            <span class="comment">#如果没有发生异常就执行fn，如果执行fn的过程中发生了异常，则top就是指向当前那个StackContext</span></div><div class="line">            <span class="keyword">if</span> top <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    ret = fn(*args, **kwargs)</div><div class="line">                <span class="keyword">except</span>:</div><div class="line">                    exc = sys.exc_info()</div><div class="line">                    <span class="comment">#因为当前的StackContext已经调用enter，所以top指向了当前的StackContext，在_handle_exception中调用exit</span></div><div class="line">                    top = contexts[<span class="number">1</span>]</div><div class="line"></div><div class="line">            <span class="comment">#如果发生了异常就处理异常</span></div><div class="line">            <span class="keyword">if</span> top <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                exc = _handle_exception(top, exc)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="comment">#反向调用context.__exit__</span></div><div class="line">                <span class="keyword">while</span> last_ctx &gt; <span class="number">0</span>:</div><div class="line">                    last_ctx -= <span class="number">1</span></div><div class="line">                    c = stack[last_ctx]</div><div class="line"></div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        c.exit(*exc)</div><div class="line">                    <span class="keyword">except</span>:</div><div class="line">                        exc = sys.exc_info()</div><div class="line">                        top = c.old_contexts[<span class="number">1</span>]</div><div class="line">                        <span class="keyword">break</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    top = <span class="keyword">None</span></div><div class="line"></div><div class="line">                <span class="keyword">if</span> top <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                    exc = _handle_exception(top, exc)</div><div class="line"></div><div class="line">            <span class="keyword">if</span> exc != (<span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>):</div><div class="line">                raise_exc_info(exc)</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            这里恢复为执行do_cb之前的_state</div><div class="line">            _state.contexts = current_state</div><div class="line">        <span class="keyword">return</span> ret</div><div class="line"></div><div class="line">    wrapped._wrapped = <span class="keyword">True</span></div><div class="line">    <span class="keyword">return</span> wrapped</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_remove_deactivated</span><span class="params">(contexts)</span>:</span></div><div class="line">    <span class="comment">#首先移除掉contexts[0]中没有激活的context</span></div><div class="line">    stack_contexts = tuple([h <span class="keyword">for</span> h <span class="keyword">in</span> contexts[<span class="number">0</span>] <span class="keyword">if</span> h.active])</div><div class="line"></div><div class="line">    <span class="comment">#上面只是移掉了当前_state里面的那些未激活的StackContext，但是没有移掉由_state[1].old_contexts链接的</span></div><div class="line">    <span class="comment">#那个大栈中的未激活的StackContext，下面的操作就是清理那个大栈（单链表）</span></div><div class="line">    <span class="comment">#首先是找到一个处于激活状态的header</span></div><div class="line">    head = contexts[<span class="number">1</span>]</div><div class="line">    <span class="keyword">while</span> head <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> <span class="keyword">not</span> head.active:</div><div class="line">        head = head.old_contexts[<span class="number">1</span>]</div><div class="line"></div><div class="line">    <span class="comment">#下面是单指针链表删除指定条件的节点。删除指定条件的节点，首先要找到其前一个节点，然后将这个节点的指针指向</span></div><div class="line">    <span class="comment">#要删除节点的下一个节点。对单链表不熟的同学可以google一下。</span></div><div class="line">    ctx = head</div><div class="line">    <span class="keyword">while</span> ctx <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        parent = ctx.old_contexts[<span class="number">1</span>]</div><div class="line"></div><div class="line">        <span class="keyword">while</span> parent <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">if</span> parent.active:</div><div class="line">                <span class="keyword">break</span></div><div class="line">            ctx.old_contexts = parent.old_contexts</div><div class="line">            parent = parent.old_contexts[<span class="number">1</span>]</div><div class="line"></div><div class="line">        ctx = parent</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (stack_contexts, head)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_handle_exception</span><span class="params">(tail, exc)</span>:</span></div><div class="line">    <span class="comment">#这里从发生异常的StackContext开始，顺着old_contexts指针向前传播异常并调用用exit退出进入过的context。</span></div><div class="line">    <span class="comment">#注意contextmanager可以通过context.__exit__返回True来阻止异常进一步的传播。这也是为什么tail.exit(*exc) == True</span></div><div class="line">    <span class="comment">#时要将exc设置为(None, None, None)</span></div><div class="line">    <span class="keyword">while</span> tail <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> tail.exit(*exc):</div><div class="line">                exc = (<span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            exc = sys.exc_info()</div><div class="line"></div><div class="line">        tail = tail.old_contexts[<span class="number">1</span>]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> exc</div></pre></td></tr></table></figure>
<p>打个比喻好来说下stack_context的机制，就好像你出远门了，家里面每天吃什么你都不知道，于是你爸妈就把家里每天吃的都录下来，等你回家了按照录像里的重做一遍。<br>好了基本的都说的差不多了。ExceptionContext就是StackContext的简化版本，有兴趣的童鞋可以去看看，其实Tornado中用ExceptionContext用的更多一点，因为<br>异常处理的地方很多，使用StackContext管理资源的就少一点了。下一篇准备来聊聊IOLoop。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇文章讨论了一下gen和Future，这次讨论一下Tornado的另一个特色的机制stack_context。首先看下异步调用过程中出现的问题。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
    
    </summary>
    
    
      <category term="原创" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Tornado" scheme="http://yoursite.com/tags/Tornado/"/>
    
  </entry>
  
  <entry>
    <title>Tornado源码分析系列之一: 化异步为&#39;同步&#39;的Future和gen.coroutine</title>
    <link href="http://yoursite.com/2015/06/24/tornado-source-insight-01-gen/"/>
    <id>http://yoursite.com/2015/06/24/tornado-source-insight-01-gen/</id>
    <published>2015-06-24T02:37:07.000Z</published>
    <updated>2016-11-28T08:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>用Tornado也有一段时间，Tornado的文档还是比较匮乏的，但是幸好其代码短小精悍，很有可读性，遇到问题时总是习惯深入到其源码中。<br>这对于提升自己的Python水平和对于网络及HTTP的协议的理解也很有帮助。本文是Tornado源码系列的第一篇文章，网上关于Tornado源码分<br>析的文章也不少，大多是从Event loop入手，分析Event loop的工作原理，以及在其上如何构建TCPServer和HTTPServer。所以我就不想拾前<br>人的牙慧再去写一遍，当然这些内容我后续会涉及到，但是做为开篇第一章，我想从更加独特的角度来分析Tornado，这里就说说Tornado的gen<br>和concurrent两个模块， 这个话题网上似乎还不多，呵呵。</p>
<p>设计从需求出发，要考证一段的代码为什么写成这样而不是那样， 首先要看代码解决了什么需求。 看下代码中的例子先:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncHandler</span><span class="params">(RequestHandler)</span>:</span></div><div class="line"><span class="meta">    @asynchronous</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></div><div class="line">        http_client = AsyncHTTPClient()</div><div class="line">        http_client.fetch(<span class="string">'http://example.com'</span>, callback=self.on_fetch)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_fetch</span><span class="params">(self, response)</span>:</span></div><div class="line">        do_something_with_response(response)</div><div class="line">        self.render(<span class="string">'template.html'</span>)</div></pre></td></tr></table></figure>
<p>经过gen.coroutine修饰之后上面的这段代码可以改为</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenAsyncHandler</span><span class="params">(RequestHandler)</span>:</span></div><div class="line"><span class="meta">    @gen.coroutine</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></div><div class="line">        http_client = AsyncHTTPClient()</div><div class="line">        response = <span class="keyword">yield</span> http_client.fetch(<span class="string">'http://example.com'</span>)</div><div class="line">        do_something_with_response(response)</div><div class="line">        self.render(<span class="string">'template.html'</span>)</div></pre></td></tr></table></figure>
<p>初识这段代码觉得好神奇，其实gen.coroutine只不过是将一个基于callback的典型的异步调用适配成基于yield的伪同步，说是伪同步是因为代码流程上类<br>似同步，但是实际却是异步的。这样做有几个好处:<br>1。控制流跟同步类似，我们知道callback里去做控制流还是比较恶心的，就算nodejs里的async这样的模块，但是分支多起来也非常不好写。(爽)<br>2。可以共享变量，没有了callback，所有的本地变量在同一个作用域中。 (爽爽)<br>3。可以并行执行，yield可以抛出list或dict，并行执行其中的异步流程。(爽爽爽。。。此处省略一万个爽)</p>
<p>神奇的gen.coroutine装饰器是怎么做到这一切的？让我首先买个关子，不是进入到gen里面分析coroutine和Runner这两核心的方法(类)，而是首先分析一些这<br>些方法(类)中用到的一些技术， 然后再回到coroutine装饰器和Runner类中。</p>
<p>首先要理解的是generator是如何通过yield与外界进行通信的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> (<span class="string">'step 1.......'</span>)</div><div class="line">    res = <span class="keyword">yield</span> <span class="number">10</span></div><div class="line">    <span class="keyword">print</span> (<span class="string">'step 2.......'</span>, res) (<span class="number">3</span>)</div><div class="line"></div><div class="line">gen = test()</div><div class="line">gen.send(<span class="keyword">None</span>) <span class="comment">#next(gen)  (1)</span></div><div class="line">data = gen.send(<span class="number">20</span>) (<span class="number">2</span>)</div><div class="line"><span class="keyword">print</span> (<span class="string">'yield out .....'</span>, data)</div></pre></td></tr></table></figure>
<p>步骤1启动了generator，步骤2向generator内部发送数据，并通过yield向generator外部抛出结果10， 最后的执行结果是</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">step <span class="number">1.</span>......</div><div class="line">step <span class="number">2.</span>...... <span class="number">20</span></div><div class="line"><span class="keyword">yield</span> out ..... <span class="number">10</span></div></pre></td></tr></table></figure>
<p>然后让我再说说Future，Future是对异步调用结果的封装。一个callback型的异步调用的执行结果不仅包括调用的返回，还包括调用获得返回之后需要执行的回调，所以才需要将<br>异步调用的结果封装一下，作为一个异步调用执行结果的占位符。Future类基本可以这么写</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Future(object):</div><div class="line">    def __init__(self):</div><div class="line">        self._callback = []</div><div class="line">        self._result = None</div><div class="line">        self._done = False</div><div class="line"></div><div class="line">    def set_callback(self, cb):</div><div class="line">        self._callback.append(cb)</div><div class="line"></div><div class="line">    def _run_callback(self):</div><div class="line">        for cb in self._callback:</div><div class="line">            cb()</div><div class="line"></div><div class="line">    def set_result(self, result)</div><div class="line">        self._done = True</div><div class="line">        self._result = result</div><div class="line">        self._run_callback()</div><div class="line"></div><div class="line">    def is_ready(self):</div><div class="line">        return self._done is True</div></pre></td></tr></table></figure>
<p>当然这只是个简约版的，详细可以参看concurrent.Future。</p>
<p>最后再来说说另一个重要的函数Task， 这个函数的主要作用是将一个callback型的异步调用适配成一个返回Future的异步调用，而这个作为异步调用结果的Future会在原来的那个callback被时解析出来</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Task</span><span class="params">(func, *args, **kwargs)</span>:</span></div><div class="line">    future = Future</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_result</span><span class="params">(result)</span>:</span></div><div class="line">        <span class="keyword">if</span> future.done():</div><div class="line">            <span class="keyword">return</span></div><div class="line">        future.set_result(result)</div><div class="line"></div><div class="line">    func(*args, callback=_argument_adapter(set_result), **kwargs)</div><div class="line">    <span class="keyword">return</span> future</div></pre></td></tr></table></figure>
<p>这里忽略了一些与本文无关的部分。可以看到Task里面构造了一个callback，_argument_adapter是将callback的参数进行适配，将不定参数适配成一个参数也就是result， 最后通过<br>future.set_result(result)将result赋值给future，这样future就被解析出来。 那么问题来了，AsyncHTTPClient并没有经过Task的适配，而是直接返回一个Future。这个Future是在<br>什么时候解析的呢？进httpclient.py来看下AsyncHTTPClient是如何解析Future的，这是httpclient.py中的fetch函数，也就是我们实际发起http请求的那个函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch</span><span class="params">(self, request, callback=None, raise_error=True, **kwargs)</span>:</span></div><div class="line">    .....</div><div class="line">    future = TracebackFuture()</div><div class="line">    <span class="keyword">if</span> callback <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        callback = stack_context.wrap(callback)</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">handle_future</span><span class="params">(future)</span>:</span></div><div class="line">            exc = future.exception()</div><div class="line">            <span class="keyword">if</span> isinstance(exc, HTTPError) <span class="keyword">and</span> exc.response <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                response = exc.response</div><div class="line">            <span class="keyword">elif</span> exc <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                response = HTTPResponse(</div><div class="line">                    request, <span class="number">599</span>, error=exc,</div><div class="line">                    request_time=time.time()-request.start_time</div><div class="line">                )</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                response = future.result()</div><div class="line">            self.io_loop.add_callback(callback, response)</div><div class="line">        future.add_done_callback(handle_future)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_response</span><span class="params">(response)</span>:</span></div><div class="line">        <span class="keyword">if</span> raise_error <span class="keyword">and</span> response.error:</div><div class="line">            future.set_exception(response.error)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            future.set_result(response)</div><div class="line">    self.fetch_impl(request, handle_response)</div><div class="line">    <span class="keyword">return</span> future</div></pre></td></tr></table></figure>
<p>fetch中定义一个代表fetch异步调用执行结果的future，如果调用时传入了callback，并不是直接将callback传给fetch_impl，而是首先给future设置一个名为handle_future解析完成后的回调，这个handle_future<br>中通过add_callback把实际传进来的callback加入到IOLoop中让IOLoop规划其调用。而传入到fetch_impl中的callback 则换成被了handle_response这个函数，<br>fetch_impl最后会在当收到response的时候调用handle_response回调(这个有兴趣可以看下，如果以后有写httpserver相关的分析可能会再分析), handle_response会解析出代表执行结果的future。对没有设置callback的调用，future解析结束整个流程也就结束了。而对于设置了callback的调用，future完成之后会调用handle_future 。<br>画个简图来描述一下调用过程<br>fetch-&gt;fetch_impl-&gt;HTTP请求直到有response或出错，如果有response回调handle_response-&gt;future.set_result(response)(future有值了)-&gt;如果fetch带了callback则handle_future-&gt;ioloop中调用callback<br>至此可以看到AsyncHTTPClient是如何把一个callback型的异步调用转换成一个返回future的异步调用，而这个future会在handle_response调用时被解析得到返回的response。</p>
<p>好了，差不多该深入gen.coroutine这个装饰器以及其最终实现Runner类。其实看完上面的内容gen.coroutine和Runner的作用也呼之欲出，其主要功能就是拿到yield出的异步调用返回的future，看这个<br>future是否已经完成，如果完成就把结果再send到generator中，如果没有完成就要为future设置一个完成时回调，这个回调的主要作用就是启动Runner(也就是调用run方法)。至于future啥时候完成，这个<br>gen.coroutine和Runner可不管，你必须设计一个AsyncHTTPClient中fetch那样的返回Future的异步调用或者用Task封装一下你的带有callback的异步调用。下面是节选gen.coroutine装饰器中主要方法<br>_make_coroutine_wrapper的代码的主要部分</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    yielded = next(result)</div><div class="line"><span class="keyword">except</span> (StopIteration， Return) <span class="keyword">as</span> e:</div><div class="line">    future.set_result(getattr(e, <span class="string">'value'</span>, <span class="keyword">None</span>))</div><div class="line"><span class="keyword">except</span> Exception:</div><div class="line">    future.set_exc_info(sys.exc_info())</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    Runner(result, future, yielded)</div></pre></td></tr></table></figure>
<p>result就是被装饰的函数返回的generator，next启动这个generator， 如果generator抛出StopIteration和Return两个异常，表示generator已经解析出结果，将这个结果设置给最后coroutine返回的<br>future。如果有其他异常表示generator执行过程中发生了异常，将异常设置到future中。排除这两种情况，表示generator还没有执行完毕，调用Runner执行generator。Runner的参数result就是还没<br>有运行完毕generator， future是代表coroutine执行结果的那个future， 而yielded是func返回的future(或者YieldPoint，咱们只考虑future的情况)。再深入到Runner中，主要有两个函数handle_yield<br>和run，handle_yield主要是确定generator返回的yielded是否是一个执行完成的yielded(对于yielded是future的情况来说就是future.is_ready() == True)，如果没有执行完成则需要设置future完成时<br>执行run方法，也就是future.add_done_callback(future, lambda f:self.run())并返回False也就是不执行马上run， 否则返回True并立即执行run方法，因为这时候已经有异步调用的结果了。<br>run方法拿到yielded的执行结果，并传入到generator中。这样generator内部就能通过yield拿到异步调用的执行结果了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">def</span> <span class="title">handle_yield</span><span class="params">(self, yielded)</span>:</span></div><div class="line">    <span class="comment">#处理YieldPoint忽略掉，但是原理跟Future是一样的</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        self.future = convert_yielded(yielded)</div><div class="line">    <span class="keyword">except</span> BadYieldError:</div><div class="line">        self.future = TracebackFuture()</div><div class="line">        self.future.set_exc_info(sys.exc_info())</div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.future.done() <span class="keyword">or</span> self.future <span class="keyword">is</span> moment:</div><div class="line">        self.io_loop.add_future(</div><div class="line">            self.future, <span class="keyword">lambda</span> f: self.run())</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.running <span class="keyword">or</span> self.finished:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.running = <span class="keyword">True</span></div><div class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">                future = self.future</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> future.done(): <span class="comment">#执行run时generator返回的那个future必须已经有结果，否则就没必要传回到generator中了</span></div><div class="line">                    <span class="keyword">return</span></div><div class="line">                self.future = <span class="keyword">None</span></div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    orig_stack_contexts = stack_context._state.contexts</div><div class="line">                    exc_info = <span class="keyword">None</span></div><div class="line"></div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        value = future.result()</div><div class="line">                    <span class="keyword">except</span> Exception:</div><div class="line">                        self.had_exception = <span class="keyword">True</span></div><div class="line">                        exc_info = sys.exc_info()</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> exc_info <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                        yielded = self.gen.throw(*exc_info)</div><div class="line">                        exc_info = <span class="keyword">None</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        yielded = self.gen.send(value)</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> stack_context._state.contexts <span class="keyword">is</span> <span class="keyword">not</span> orig_stack_contexts:</div><div class="line">                        self.gen.throw(</div><div class="line">                            stack_context.StackContextInconsistentError(</div><div class="line">                                <span class="string">'stack_context inconsistency (probably caused '</span></div><div class="line">                                <span class="string">'by yield within a "with StackContext" block)'</span>))</div><div class="line">                <span class="keyword">except</span> (StopIteration, Return) <span class="keyword">as</span> e:</div><div class="line">                    <span class="comment">#generator执行完毕并成功的处理</span></div><div class="line">                <span class="keyword">except</span> Exception:</div><div class="line">                    <span class="comment">#generator执行过程中异常的处理</span></div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self.handle_yield(yielded):</div><div class="line">                    <span class="comment">#这里generator还没有执行完毕，yielded是generator迭代过一次之后返回的新yielded。如果yieled还没有被解析出结果就通过handle_yield给yieled设置完成时的重启run的回调,</span></div><div class="line">                    <span class="comment">#否则yielded已经有结果，就再次运行run，所以run中才会有一个循环</span></div><div class="line">                    <span class="keyword">return</span></div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            self.running = <span class="keyword">False</span></div></pre></td></tr></table></figure>
<p>分析完毕，没看懂的同学可以在读两遍代码，主要还是要抓住coroutine装饰器只不过是将callback型调用转换成generator型伪同步调用的一个适配器这个关键点，阅读起代码来就明白多了。期待下篇吧，准备<br>写stack_context异步调用中的异常捕获问题</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Tornado也有一段时间，Tornado的文档还是比较匮乏的，但是幸好其代码短小精悍，很有可读性，遇到问题时总是习惯深入到其源码中。&lt;br&gt;这对于提升自己的Python水平和对于网络及HTTP的协议的理解也很有帮助。本文是Tornado源码系列的第一篇文章，网上关于To
    
    </summary>
    
    
      <category term="原创" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Tornado" scheme="http://yoursite.com/tags/Tornado/"/>
    
  </entry>
  
  <entry>
    <title>我的第一个博客</title>
    <link href="http://yoursite.com/2015/06/23/first-blog/"/>
    <id>http://yoursite.com/2015/06/23/first-blog/</id>
    <published>2015-06-23T12:02:57.000Z</published>
    <updated>2016-11-28T08:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天终于有属于自己的域名的博客了！以前也在CSDN，博客园等开过博客，但是总觉得不专业，big不够深，最终都流于形式，希望这个博客能越办越好!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天终于有属于自己的域名的博客了！以前也在CSDN，博客园等开过博客，但是总觉得不专业，big不够深，最终都流于形式，希望这个博客能越办越好!&lt;/p&gt;

    
    </summary>
    
    
      <category term="心情" scheme="http://yoursite.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
</feed>
